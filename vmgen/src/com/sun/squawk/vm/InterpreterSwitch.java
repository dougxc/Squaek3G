/* **** GENERATED FILE -- DO NOT EDIT ****
 *      generated by com.sun.squawk.builder.gen.InterpreterSwitch
 *
 * Copyright 2004 Sun Microsystems, Inc. All Rights Reserved.
 *
 * This software is the proprietary information of Sun Microsystems, Inc.
 * Use is subject to license terms.
 *
 * This is a part of the Squawk JVM.
 */

package com.sun.squawk.vm;

import com.sun.squawk.compiler.*;

/**
 * This class defines the switch table used by the generated Squawk interpreter.
 *
 * @author   Nik Shaylor
 */
abstract public class InterpreterSwitch extends Common implements Types {

    /**
     * Flags to show how the loading of the next bytecode should be done.
     */
    protected final static int FLOW_NEXT   = 0, // The next bytecode is always executed after the current one.
                               FLOW_CHANGE = 1, // The bytecode changes the control flow.
                               FLOW_CALL   = 2; // The bytecode either calls a routine, or might throw an exception.

    abstract protected void pre(int code);
    abstract protected void post();
    abstract protected void bind(int opcode);
    abstract protected void iparmNone();
    abstract protected void iparmByte();
    abstract protected void iparmUByte();

    /**
     * Create the bytecode interpreter.
     */
    protected void do_switch() {
        {
            bind(OPC.CONST_0);                    iparmNone();
                                                  pre(FLOW_NEXT); do_const(0); post();
            bind(OPC.CONST_1);                    iparmNone();
                                                  pre(FLOW_NEXT); do_const(1); post();
            bind(OPC.CONST_2);                    iparmNone();
                                                  pre(FLOW_NEXT); do_const(2); post();
            bind(OPC.CONST_3);                    iparmNone();
                                                  pre(FLOW_NEXT); do_const(3); post();
            bind(OPC.CONST_4);                    iparmNone();
                                                  pre(FLOW_NEXT); do_const(4); post();
            bind(OPC.CONST_5);                    iparmNone();
                                                  pre(FLOW_NEXT); do_const(5); post();
            bind(OPC.CONST_6);                    iparmNone();
                                                  pre(FLOW_NEXT); do_const(6); post();
            bind(OPC.CONST_7);                    iparmNone();
                                                  pre(FLOW_NEXT); do_const(7); post();
            bind(OPC.CONST_8);                    iparmNone();
                                                  pre(FLOW_NEXT); do_const(8); post();
            bind(OPC.CONST_9);                    iparmNone();
                                                  pre(FLOW_NEXT); do_const(9); post();
            bind(OPC.CONST_10);                   iparmNone();
                                                  pre(FLOW_NEXT); do_const(10); post();
            bind(OPC.CONST_11);                   iparmNone();
                                                  pre(FLOW_NEXT); do_const(11); post();
            bind(OPC.CONST_12);                   iparmNone();
                                                  pre(FLOW_NEXT); do_const(12); post();
            bind(OPC.CONST_13);                   iparmNone();
                                                  pre(FLOW_NEXT); do_const(13); post();
            bind(OPC.CONST_14);                   iparmNone();
                                                  pre(FLOW_NEXT); do_const(14); post();
            bind(OPC.CONST_15);                   iparmNone();
                                                  pre(FLOW_NEXT); do_const(15); post();
            bind(OPC.OBJECT_0);                   iparmNone();
                                                  pre(FLOW_NEXT); do_object(0); post();
            bind(OPC.OBJECT_1);                   iparmNone();
                                                  pre(FLOW_NEXT); do_object(1); post();
            bind(OPC.OBJECT_2);                   iparmNone();
                                                  pre(FLOW_NEXT); do_object(2); post();
            bind(OPC.OBJECT_3);                   iparmNone();
                                                  pre(FLOW_NEXT); do_object(3); post();
            bind(OPC.OBJECT_4);                   iparmNone();
                                                  pre(FLOW_NEXT); do_object(4); post();
            bind(OPC.OBJECT_5);                   iparmNone();
                                                  pre(FLOW_NEXT); do_object(5); post();
            bind(OPC.OBJECT_6);                   iparmNone();
                                                  pre(FLOW_NEXT); do_object(6); post();
            bind(OPC.OBJECT_7);                   iparmNone();
                                                  pre(FLOW_NEXT); do_object(7); post();
            bind(OPC.OBJECT_8);                   iparmNone();
                                                  pre(FLOW_NEXT); do_object(8); post();
            bind(OPC.OBJECT_9);                   iparmNone();
                                                  pre(FLOW_NEXT); do_object(9); post();
            bind(OPC.OBJECT_10);                  iparmNone();
                                                  pre(FLOW_NEXT); do_object(10); post();
            bind(OPC.OBJECT_11);                  iparmNone();
                                                  pre(FLOW_NEXT); do_object(11); post();
            bind(OPC.OBJECT_12);                  iparmNone();
                                                  pre(FLOW_NEXT); do_object(12); post();
            bind(OPC.OBJECT_13);                  iparmNone();
                                                  pre(FLOW_NEXT); do_object(13); post();
            bind(OPC.OBJECT_14);                  iparmNone();
                                                  pre(FLOW_NEXT); do_object(14); post();
            bind(OPC.OBJECT_15);                  iparmNone();
                                                  pre(FLOW_NEXT); do_object(15); post();
            bind(OPC.LOAD_0);                     iparmNone();
                                                  pre(FLOW_NEXT); do_load(0); post();
            bind(OPC.LOAD_1);                     iparmNone();
                                                  pre(FLOW_NEXT); do_load(1); post();
            bind(OPC.LOAD_2);                     iparmNone();
                                                  pre(FLOW_NEXT); do_load(2); post();
            bind(OPC.LOAD_3);                     iparmNone();
                                                  pre(FLOW_NEXT); do_load(3); post();
            bind(OPC.LOAD_4);                     iparmNone();
                                                  pre(FLOW_NEXT); do_load(4); post();
            bind(OPC.LOAD_5);                     iparmNone();
                                                  pre(FLOW_NEXT); do_load(5); post();
            bind(OPC.LOAD_6);                     iparmNone();
                                                  pre(FLOW_NEXT); do_load(6); post();
            bind(OPC.LOAD_7);                     iparmNone();
                                                  pre(FLOW_NEXT); do_load(7); post();
            bind(OPC.LOAD_8);                     iparmNone();
                                                  pre(FLOW_NEXT); do_load(8); post();
            bind(OPC.LOAD_9);                     iparmNone();
                                                  pre(FLOW_NEXT); do_load(9); post();
            bind(OPC.LOAD_10);                    iparmNone();
                                                  pre(FLOW_NEXT); do_load(10); post();
            bind(OPC.LOAD_11);                    iparmNone();
                                                  pre(FLOW_NEXT); do_load(11); post();
            bind(OPC.LOAD_12);                    iparmNone();
                                                  pre(FLOW_NEXT); do_load(12); post();
            bind(OPC.LOAD_13);                    iparmNone();
                                                  pre(FLOW_NEXT); do_load(13); post();
            bind(OPC.LOAD_14);                    iparmNone();
                                                  pre(FLOW_NEXT); do_load(14); post();
            bind(OPC.LOAD_15);                    iparmNone();
                                                  pre(FLOW_NEXT); do_load(15); post();
            bind(OPC.STORE_0);                    iparmNone();
                                                  pre(FLOW_NEXT); do_store(0); post();
            bind(OPC.STORE_1);                    iparmNone();
                                                  pre(FLOW_NEXT); do_store(1); post();
            bind(OPC.STORE_2);                    iparmNone();
                                                  pre(FLOW_NEXT); do_store(2); post();
            bind(OPC.STORE_3);                    iparmNone();
                                                  pre(FLOW_NEXT); do_store(3); post();
            bind(OPC.STORE_4);                    iparmNone();
                                                  pre(FLOW_NEXT); do_store(4); post();
            bind(OPC.STORE_5);                    iparmNone();
                                                  pre(FLOW_NEXT); do_store(5); post();
            bind(OPC.STORE_6);                    iparmNone();
                                                  pre(FLOW_NEXT); do_store(6); post();
            bind(OPC.STORE_7);                    iparmNone();
                                                  pre(FLOW_NEXT); do_store(7); post();
            bind(OPC.STORE_8);                    iparmNone();
                                                  pre(FLOW_NEXT); do_store(8); post();
            bind(OPC.STORE_9);                    iparmNone();
                                                  pre(FLOW_NEXT); do_store(9); post();
            bind(OPC.STORE_10);                   iparmNone();
                                                  pre(FLOW_NEXT); do_store(10); post();
            bind(OPC.STORE_11);                   iparmNone();
                                                  pre(FLOW_NEXT); do_store(11); post();
            bind(OPC.STORE_12);                   iparmNone();
                                                  pre(FLOW_NEXT); do_store(12); post();
            bind(OPC.STORE_13);                   iparmNone();
                                                  pre(FLOW_NEXT); do_store(13); post();
            bind(OPC.STORE_14);                   iparmNone();
                                                  pre(FLOW_NEXT); do_store(14); post();
            bind(OPC.STORE_15);                   iparmNone();
                                                  pre(FLOW_NEXT); do_store(15); post();
            bind(OPC.LOADPARM_0);                 iparmNone();
                                                  pre(FLOW_NEXT); do_loadparm(0); post();
            bind(OPC.LOADPARM_1);                 iparmNone();
                                                  pre(FLOW_NEXT); do_loadparm(1); post();
            bind(OPC.LOADPARM_2);                 iparmNone();
                                                  pre(FLOW_NEXT); do_loadparm(2); post();
            bind(OPC.LOADPARM_3);                 iparmNone();
                                                  pre(FLOW_NEXT); do_loadparm(3); post();
            bind(OPC.LOADPARM_4);                 iparmNone();
                                                  pre(FLOW_NEXT); do_loadparm(4); post();
            bind(OPC.LOADPARM_5);                 iparmNone();
                                                  pre(FLOW_NEXT); do_loadparm(5); post();
            bind(OPC.LOADPARM_6);                 iparmNone();
                                                  pre(FLOW_NEXT); do_loadparm(6); post();
            bind(OPC.LOADPARM_7);                 iparmNone();
                                                  pre(FLOW_NEXT); do_loadparm(7); post();
            bind(OPC.WIDE_M1);                    iparmNone();
                                                  pre(FLOW_CHANGE); do_wide(-1); post();
            bind(OPC.WIDE_0);                     iparmNone();
                                                  pre(FLOW_CHANGE); do_wide(0); post();
            bind(OPC.WIDE_1);                     iparmNone();
                                                  pre(FLOW_CHANGE); do_wide(1); post();
            bind(OPC.WIDE_SHORT);                 iparmNone();
                                                  pre(FLOW_CHANGE); do_wide_short(); post();
            bind(OPC.WIDE_INT);                   iparmNone();
                                                  pre(FLOW_CHANGE); do_wide_int(); post();
            bind(OPC.ESCAPE);                     iparmNone();
                                                  pre(FLOW_CHANGE); do_escape(); post();
            bind(OPC.ESCAPE_WIDE_M1);             iparmNone();
                                                  pre(FLOW_CHANGE); do_escape_wide(-1); post();
            bind(OPC.ESCAPE_WIDE_0);              iparmNone();
                                                  pre(FLOW_CHANGE); do_escape_wide(0); post();
            bind(OPC.ESCAPE_WIDE_1);              iparmNone();
                                                  pre(FLOW_CHANGE); do_escape_wide(1); post();
            bind(OPC.ESCAPE_WIDE_SHORT);          iparmNone();
                                                  pre(FLOW_CHANGE); do_escape_wide_short(); post();
            bind(OPC.ESCAPE_WIDE_INT);            iparmNone();
                                                  pre(FLOW_CHANGE); do_escape_wide_int(); post();
            bind(OPC.CATCH);                      iparmNone();
                                                  pre(FLOW_NEXT); do_catch(); post();
            bind(OPC.CONST_NULL);                 iparmNone();
                                                  pre(FLOW_NEXT); do_const_null(); post();
            bind(OPC.CONST_M1);                   iparmNone();
                                                  pre(FLOW_NEXT); do_const(-1); post();
            bind(OPC.CONST_BYTE);                 iparmNone();
                                                  pre(FLOW_NEXT); do_const_byte(); post();
            bind(OPC.CONST_SHORT);                iparmNone();
                                                  pre(FLOW_NEXT); do_const_short(); post();
            bind(OPC.CONST_CHAR);                 iparmNone();
                                                  pre(FLOW_NEXT); do_const_char(); post();
            bind(OPC.CONST_INT);                  iparmNone();
                                                  pre(FLOW_NEXT); do_const_int(); post();
            bind(OPC.CONST_LONG);                 iparmNone();
                                                  pre(FLOW_NEXT); do_const_long(); post();
            bind(OPC.OBJECT);                     iparmUByte();
            bind(OPC.OBJECT_WIDE);                pre(FLOW_NEXT); do_object(); post();
            bind(OPC.LOAD);                       iparmUByte();
            bind(OPC.LOAD_WIDE);                  pre(FLOW_NEXT); do_load(); post(); 
            bind(OPC.LOAD_I2);                    iparmUByte();
            bind(OPC.LOAD_I2_WIDE);               pre(FLOW_NEXT); do_load_i2(); post();
            bind(OPC.STORE);                      iparmUByte();
            bind(OPC.STORE_WIDE);                 pre(FLOW_NEXT); do_store(); post();
            bind(OPC.STORE_I2);                   iparmUByte();
            bind(OPC.STORE_I2_WIDE);              pre(FLOW_NEXT); do_store_i2(); post();
            bind(OPC.LOADPARM);                   iparmUByte();
            bind(OPC.LOADPARM_WIDE);              pre(FLOW_NEXT); do_loadparm(); post();
            bind(OPC.LOADPARM_I2);                iparmUByte();
            bind(OPC.LOADPARM_I2_WIDE);           pre(FLOW_NEXT); do_loadparm_i2(); post();
            bind(OPC.STOREPARM);                  iparmUByte();
            bind(OPC.STOREPARM_WIDE);             pre(FLOW_NEXT); do_storeparm(); post();
            bind(OPC.STOREPARM_I2);               iparmUByte();
            bind(OPC.STOREPARM_I2_WIDE);          pre(FLOW_NEXT); do_storeparm_i2(); post();
            bind(OPC.INC);                        iparmUByte();
            bind(OPC.INC_WIDE);                   pre(FLOW_NEXT); do_inc(); post();  
            bind(OPC.DEC);                        iparmUByte();
            bind(OPC.DEC_WIDE);                   pre(FLOW_NEXT); do_dec(); post();  
            bind(OPC.INCPARM);                    iparmUByte();
            bind(OPC.INCPARM_WIDE);               pre(FLOW_NEXT); do_incparm(); post();
            bind(OPC.DECPARM);                    iparmUByte();
            bind(OPC.DECPARM_WIDE);               pre(FLOW_NEXT); do_decparm(); post();
            bind(OPC.GOTO);                       iparmByte();
            bind(OPC.GOTO_WIDE);                  pre(FLOW_CHANGE); do_goto(); post();
            bind(OPC.IF_EQ_O);                    iparmByte();
            bind(OPC.IF_EQ_O_WIDE);               pre(FLOW_CHANGE); do_if(1, EQ, OOP); post();
            bind(OPC.IF_NE_O);                    iparmByte();
            bind(OPC.IF_NE_O_WIDE);               pre(FLOW_CHANGE); do_if(1, NE, OOP); post();
            bind(OPC.IF_CMPEQ_O);                 iparmByte();
            bind(OPC.IF_CMPEQ_O_WIDE);            pre(FLOW_CHANGE); do_if(2, EQ, OOP); post();
            bind(OPC.IF_CMPNE_O);                 iparmByte();
            bind(OPC.IF_CMPNE_O_WIDE);            pre(FLOW_CHANGE); do_if(2, NE, OOP); post();
            bind(OPC.IF_EQ_I);                    iparmByte();
            bind(OPC.IF_EQ_I_WIDE);               pre(FLOW_CHANGE); do_if(1, EQ, INT); post();
            bind(OPC.IF_NE_I);                    iparmByte();
            bind(OPC.IF_NE_I_WIDE);               pre(FLOW_CHANGE); do_if(1, NE, INT); post();
            bind(OPC.IF_LT_I);                    iparmByte();
            bind(OPC.IF_LT_I_WIDE);               pre(FLOW_CHANGE); do_if(1, LT, INT); post();
            bind(OPC.IF_LE_I);                    iparmByte();
            bind(OPC.IF_LE_I_WIDE);               pre(FLOW_CHANGE); do_if(1, LE, INT); post();
            bind(OPC.IF_GT_I);                    iparmByte();
            bind(OPC.IF_GT_I_WIDE);               pre(FLOW_CHANGE); do_if(1, GT, INT); post();
            bind(OPC.IF_GE_I);                    iparmByte();
            bind(OPC.IF_GE_I_WIDE);               pre(FLOW_CHANGE); do_if(1, GE, INT); post();
            bind(OPC.IF_CMPEQ_I);                 iparmByte();
            bind(OPC.IF_CMPEQ_I_WIDE);            pre(FLOW_CHANGE); do_if(2, EQ, INT); post();
            bind(OPC.IF_CMPNE_I);                 iparmByte();
            bind(OPC.IF_CMPNE_I_WIDE);            pre(FLOW_CHANGE); do_if(2, NE, INT); post();
            bind(OPC.IF_CMPLT_I);                 iparmByte();
            bind(OPC.IF_CMPLT_I_WIDE);            pre(FLOW_CHANGE); do_if(2, LT, INT); post();
            bind(OPC.IF_CMPLE_I);                 iparmByte();
            bind(OPC.IF_CMPLE_I_WIDE);            pre(FLOW_CHANGE); do_if(2, LE, INT); post();
            bind(OPC.IF_CMPGT_I);                 iparmByte();
            bind(OPC.IF_CMPGT_I_WIDE);            pre(FLOW_CHANGE); do_if(2, GT, INT); post();
            bind(OPC.IF_CMPGE_I);                 iparmByte();
            bind(OPC.IF_CMPGE_I_WIDE);            pre(FLOW_CHANGE); do_if(2, GE, INT); post();
            bind(OPC.IF_EQ_L);                    iparmByte();
            bind(OPC.IF_EQ_L_WIDE);               pre(FLOW_CHANGE); do_if(1, EQ, LONG); post();
            bind(OPC.IF_NE_L);                    iparmByte();
            bind(OPC.IF_NE_L_WIDE);               pre(FLOW_CHANGE); do_if(1, NE, LONG); post();
            bind(OPC.IF_LT_L);                    iparmByte();
            bind(OPC.IF_LT_L_WIDE);               pre(FLOW_CHANGE); do_if(1, LT, LONG); post();
            bind(OPC.IF_LE_L);                    iparmByte();
            bind(OPC.IF_LE_L_WIDE);               pre(FLOW_CHANGE); do_if(1, LE, LONG); post();
            bind(OPC.IF_GT_L);                    iparmByte();
            bind(OPC.IF_GT_L_WIDE);               pre(FLOW_CHANGE); do_if(1, GT, LONG); post();
            bind(OPC.IF_GE_L);                    iparmByte();
            bind(OPC.IF_GE_L_WIDE);               pre(FLOW_CHANGE); do_if(1, GE, LONG); post();
            bind(OPC.IF_CMPEQ_L);                 iparmByte();
            bind(OPC.IF_CMPEQ_L_WIDE);            pre(FLOW_CHANGE); do_if(2, EQ, LONG); post();
            bind(OPC.IF_CMPNE_L);                 iparmByte();
            bind(OPC.IF_CMPNE_L_WIDE);            pre(FLOW_CHANGE); do_if(2, NE, LONG); post();
            bind(OPC.IF_CMPLT_L);                 iparmByte();
            bind(OPC.IF_CMPLT_L_WIDE);            pre(FLOW_CHANGE); do_if(2, LT, LONG); post();
            bind(OPC.IF_CMPLE_L);                 iparmByte();
            bind(OPC.IF_CMPLE_L_WIDE);            pre(FLOW_CHANGE); do_if(2, LE, LONG); post();
            bind(OPC.IF_CMPGT_L);                 iparmByte();
            bind(OPC.IF_CMPGT_L_WIDE);            pre(FLOW_CHANGE); do_if(2, GT, LONG); post();
            bind(OPC.IF_CMPGE_L);                 iparmByte();
            bind(OPC.IF_CMPGE_L_WIDE);            pre(FLOW_CHANGE); do_if(2, GE, LONG); post();
            bind(OPC.GETSTATIC_I);                iparmUByte();
            bind(OPC.GETSTATIC_I_WIDE);           pre(FLOW_CALL); do_getstatic(INT); post();
            bind(OPC.GETSTATIC_O);                iparmUByte();
            bind(OPC.GETSTATIC_O_WIDE);           pre(FLOW_CALL); do_getstatic(OOP); post();
            bind(OPC.GETSTATIC_L);                iparmUByte();
            bind(OPC.GETSTATIC_L_WIDE);           pre(FLOW_CALL); do_getstatic(LONG); post();
            bind(OPC.CLASS_GETSTATIC_I);          iparmUByte();
            bind(OPC.CLASS_GETSTATIC_I_WIDE);     pre(FLOW_CALL); do_class_getstatic(INT); post();
            bind(OPC.CLASS_GETSTATIC_O);          iparmUByte();
            bind(OPC.CLASS_GETSTATIC_O_WIDE);     pre(FLOW_CALL); do_class_getstatic(OOP); post();
            bind(OPC.CLASS_GETSTATIC_L);          iparmUByte();
            bind(OPC.CLASS_GETSTATIC_L_WIDE);     pre(FLOW_CALL); do_class_getstatic(LONG); post();
            bind(OPC.PUTSTATIC_I);                iparmUByte();
            bind(OPC.PUTSTATIC_I_WIDE);           pre(FLOW_CALL); do_putstatic(INT); post();
            bind(OPC.PUTSTATIC_O);                iparmUByte();
            bind(OPC.PUTSTATIC_O_WIDE);           pre(FLOW_CALL); do_putstatic(OOP); post();
            bind(OPC.PUTSTATIC_L);                iparmUByte();
            bind(OPC.PUTSTATIC_L_WIDE);           pre(FLOW_CALL); do_putstatic(LONG); post();
            bind(OPC.CLASS_PUTSTATIC_I);          iparmUByte();
            bind(OPC.CLASS_PUTSTATIC_I_WIDE);     pre(FLOW_CALL); do_class_putstatic(INT); post();
            bind(OPC.CLASS_PUTSTATIC_O);          iparmUByte();
            bind(OPC.CLASS_PUTSTATIC_O_WIDE);     pre(FLOW_CALL); do_class_putstatic(OOP); post();
            bind(OPC.CLASS_PUTSTATIC_L);          iparmUByte();
            bind(OPC.CLASS_PUTSTATIC_L_WIDE);     pre(FLOW_CALL); do_class_putstatic(LONG); post();
            bind(OPC.GETFIELD_I);                 iparmUByte();
            bind(OPC.GETFIELD_I_WIDE);            pre(FLOW_CALL); do_getfield(INT); post();
            bind(OPC.GETFIELD_B);                 iparmUByte();
            bind(OPC.GETFIELD_B_WIDE);            pre(FLOW_CALL); do_getfield(BYTE); post();
            bind(OPC.GETFIELD_S);                 iparmUByte();
            bind(OPC.GETFIELD_S_WIDE);            pre(FLOW_CALL); do_getfield(SHORT); post();
            bind(OPC.GETFIELD_C);                 iparmUByte();
            bind(OPC.GETFIELD_C_WIDE);            pre(FLOW_CALL); do_getfield(USHORT); post();
            bind(OPC.GETFIELD_O);                 iparmUByte();
            bind(OPC.GETFIELD_O_WIDE);            pre(FLOW_CALL); do_getfield(OOP); post();
            bind(OPC.GETFIELD_L);                 iparmUByte();
            bind(OPC.GETFIELD_L_WIDE);            pre(FLOW_CALL); do_getfield(LONG); post();
            bind(OPC.GETFIELD0_I);                iparmUByte();
            bind(OPC.GETFIELD0_I_WIDE);           pre(FLOW_NEXT); do_getfield0(INT); post();
            bind(OPC.GETFIELD0_B);                iparmUByte();
            bind(OPC.GETFIELD0_B_WIDE);           pre(FLOW_NEXT); do_getfield0(BYTE); post();
            bind(OPC.GETFIELD0_S);                iparmUByte();
            bind(OPC.GETFIELD0_S_WIDE);           pre(FLOW_NEXT); do_getfield0(SHORT); post();
            bind(OPC.GETFIELD0_C);                iparmUByte();
            bind(OPC.GETFIELD0_C_WIDE);           pre(FLOW_NEXT); do_getfield0(USHORT); post();
            bind(OPC.GETFIELD0_O);                iparmUByte();
            bind(OPC.GETFIELD0_O_WIDE);           pre(FLOW_NEXT); do_getfield0(OOP); post();
            bind(OPC.GETFIELD0_L);                iparmUByte();
            bind(OPC.GETFIELD0_L_WIDE);           pre(FLOW_NEXT); do_getfield0(LONG); post();
            bind(OPC.PUTFIELD_I);                 iparmUByte();
            bind(OPC.PUTFIELD_I_WIDE);            pre(FLOW_CALL); do_putfield(INT); post();
            bind(OPC.PUTFIELD_B);                 iparmUByte();
            bind(OPC.PUTFIELD_B_WIDE);            pre(FLOW_CALL); do_putfield(BYTE); post();
            bind(OPC.PUTFIELD_S);                 iparmUByte();
            bind(OPC.PUTFIELD_S_WIDE);            pre(FLOW_CALL); do_putfield(SHORT); post();
            bind(OPC.PUTFIELD_O);                 iparmUByte();
            bind(OPC.PUTFIELD_O_WIDE);            pre(FLOW_CALL); do_putfield(OOP); post();
            bind(OPC.PUTFIELD_L);                 iparmUByte();
            bind(OPC.PUTFIELD_L_WIDE);            pre(FLOW_CALL); do_putfield(LONG); post();
            bind(OPC.PUTFIELD0_I);                iparmUByte();
            bind(OPC.PUTFIELD0_I_WIDE);           pre(FLOW_NEXT); do_putfield0(INT); post();
            bind(OPC.PUTFIELD0_B);                iparmUByte();
            bind(OPC.PUTFIELD0_B_WIDE);           pre(FLOW_NEXT); do_putfield0(BYTE); post();
            bind(OPC.PUTFIELD0_S);                iparmUByte();
            bind(OPC.PUTFIELD0_S_WIDE);           pre(FLOW_NEXT); do_putfield0(SHORT); post();
            bind(OPC.PUTFIELD0_O);                iparmUByte();
            bind(OPC.PUTFIELD0_O_WIDE);           pre(FLOW_NEXT); do_putfield0(OOP); post();
            bind(OPC.PUTFIELD0_L);                iparmUByte();
            bind(OPC.PUTFIELD0_L_WIDE);           pre(FLOW_NEXT); do_putfield0(LONG); post();
            bind(OPC.INVOKEVIRTUAL_I);            iparmUByte();
            bind(OPC.INVOKEVIRTUAL_I_WIDE);       pre(FLOW_CALL); do_invokevirtual(INT); post();
            bind(OPC.INVOKEVIRTUAL_V);            iparmUByte();
            bind(OPC.INVOKEVIRTUAL_V_WIDE);       pre(FLOW_CALL); do_invokevirtual(VOID); post();
            bind(OPC.INVOKEVIRTUAL_L);            iparmUByte();
            bind(OPC.INVOKEVIRTUAL_L_WIDE);       pre(FLOW_CALL); do_invokevirtual(LONG); post();
            bind(OPC.INVOKEVIRTUAL_O);            iparmUByte();
            bind(OPC.INVOKEVIRTUAL_O_WIDE);       pre(FLOW_CALL); do_invokevirtual(OOP); post();
            bind(OPC.INVOKESTATIC_I);             iparmUByte();
            bind(OPC.INVOKESTATIC_I_WIDE);        pre(FLOW_CALL); do_invokestatic(INT); post();
            bind(OPC.INVOKESTATIC_V);             iparmUByte();
            bind(OPC.INVOKESTATIC_V_WIDE);        pre(FLOW_CALL); do_invokestatic(VOID); post();
            bind(OPC.INVOKESTATIC_L);             iparmUByte();
            bind(OPC.INVOKESTATIC_L_WIDE);        pre(FLOW_CALL); do_invokestatic(LONG); post();
            bind(OPC.INVOKESTATIC_O);             iparmUByte();
            bind(OPC.INVOKESTATIC_O_WIDE);        pre(FLOW_CALL); do_invokestatic(OOP); post();
            bind(OPC.INVOKESUPER_I);              iparmUByte();
            bind(OPC.INVOKESUPER_I_WIDE);         pre(FLOW_CALL); do_invokesuper(INT); post();
            bind(OPC.INVOKESUPER_V);              iparmUByte();
            bind(OPC.INVOKESUPER_V_WIDE);         pre(FLOW_CALL); do_invokesuper(VOID); post();
            bind(OPC.INVOKESUPER_L);              iparmUByte();
            bind(OPC.INVOKESUPER_L_WIDE);         pre(FLOW_CALL); do_invokesuper(LONG); post();
            bind(OPC.INVOKESUPER_O);              iparmUByte();
            bind(OPC.INVOKESUPER_O_WIDE);         pre(FLOW_CALL); do_invokesuper(OOP); post();
            bind(OPC.INVOKENATIVE_I);             iparmUByte();
            bind(OPC.INVOKENATIVE_I_WIDE);        pre(FLOW_CALL); do_invokenative(INT); post();
            bind(OPC.INVOKENATIVE_V);             iparmUByte();
            bind(OPC.INVOKENATIVE_V_WIDE);        pre(FLOW_CALL); do_invokenative(VOID); post();
            bind(OPC.INVOKENATIVE_L);             iparmUByte();
            bind(OPC.INVOKENATIVE_L_WIDE);        pre(FLOW_CALL); do_invokenative(LONG); post();
            bind(OPC.INVOKENATIVE_O);             iparmUByte();
            bind(OPC.INVOKENATIVE_O_WIDE);        pre(FLOW_CALL); do_invokenative(OOP); post();
            bind(OPC.FINDSLOT);                   iparmUByte();
            bind(OPC.FINDSLOT_WIDE);              pre(FLOW_CALL); do_findslot(); post();
            bind(OPC.EXTEND);                     iparmUByte();
            bind(OPC.EXTEND_WIDE);                pre(FLOW_NEXT); do_extend(); post();
            bind(OPC.INVOKESLOT_I);               iparmNone();
                                                  pre(FLOW_CALL); do_invokeslot(INT); post();
            bind(OPC.INVOKESLOT_V);               iparmNone();
                                                  pre(FLOW_CALL); do_invokeslot(VOID); post();
            bind(OPC.INVOKESLOT_L);               iparmNone();
                                                  pre(FLOW_CALL); do_invokeslot(LONG); post();
            bind(OPC.INVOKESLOT_O);               iparmNone();
                                                  pre(FLOW_CALL); do_invokeslot(OOP); post();
            bind(OPC.RETURN_V);                   iparmNone();
                                                  pre(FLOW_CHANGE); do_return(VOID); post();
            bind(OPC.RETURN_I);                   iparmNone();
                                                  pre(FLOW_CHANGE); do_return(INT); post();
            bind(OPC.RETURN_L);                   iparmNone();
                                                  pre(FLOW_CHANGE); do_return(LONG); post();
            bind(OPC.RETURN_O);                   iparmNone();
                                                  pre(FLOW_CHANGE); do_return(OOP); post();
            bind(OPC.TABLESWITCH_I);              iparmNone();
                                                  pre(FLOW_CHANGE); do_tableswitch(INT); post();
            bind(OPC.TABLESWITCH_S);              iparmNone();
                                                  pre(FLOW_CHANGE); do_tableswitch(SHORT); post();
            bind(OPC.EXTEND0);                    iparmNone();
                                                  pre(FLOW_NEXT); do_extend0(); post();
            bind(OPC.ADD_I);                      iparmNone();
                                                  pre(FLOW_NEXT); do_add(INT); post();
            bind(OPC.SUB_I);                      iparmNone();
                                                  pre(FLOW_NEXT); do_sub(INT); post();
            bind(OPC.AND_I);                      iparmNone();
                                                  pre(FLOW_NEXT); do_and(INT); post();
            bind(OPC.OR_I);                       iparmNone();
                                                  pre(FLOW_NEXT); do_or(INT); post();
            bind(OPC.XOR_I);                      iparmNone();
                                                  pre(FLOW_NEXT); do_xor(INT); post();
            bind(OPC.SHL_I);                      iparmNone();
                                                  pre(FLOW_NEXT); do_shl(INT); post();
            bind(OPC.SHR_I);                      iparmNone();
                                                  pre(FLOW_NEXT); do_shr(INT); post();
            bind(OPC.USHR_I);                     iparmNone();
                                                  pre(FLOW_NEXT); do_ushr(INT); post();
            bind(OPC.MUL_I);                      iparmNone();
                                                  pre(FLOW_NEXT); do_mul(INT); post();
            bind(OPC.DIV_I);                      iparmNone();
                                                  pre(FLOW_CALL); do_div(INT); post();
            bind(OPC.REM_I);                      iparmNone();
                                                  pre(FLOW_CALL); do_rem(INT); post();
            bind(OPC.NEG_I);                      iparmNone();
                                                  pre(FLOW_NEXT); do_neg(INT); post();
            bind(OPC.I2B);                        iparmNone();
                                                  pre(FLOW_NEXT); do_i2b(); post();  
            bind(OPC.I2S);                        iparmNone();
                                                  pre(FLOW_NEXT); do_i2s(); post();  
            bind(OPC.I2C);                        iparmNone();
                                                  pre(FLOW_NEXT); do_i2c(); post();  
            bind(OPC.ADD_L);                      iparmNone();
                                                  pre(FLOW_NEXT); do_add(LONG); post();
            bind(OPC.SUB_L);                      iparmNone();
                                                  pre(FLOW_NEXT); do_sub(LONG); post();
            bind(OPC.MUL_L);                      iparmNone();
                                                  pre(FLOW_NEXT); do_mul(LONG); post();
            bind(OPC.DIV_L);                      iparmNone();
                                                  pre(FLOW_CALL); do_div(LONG); post();
            bind(OPC.REM_L);                      iparmNone();
                                                  pre(FLOW_CALL); do_rem(LONG); post();
            bind(OPC.AND_L);                      iparmNone();
                                                  pre(FLOW_NEXT); do_and(LONG); post();
            bind(OPC.OR_L);                       iparmNone();
                                                  pre(FLOW_NEXT); do_or(LONG); post();
            bind(OPC.XOR_L);                      iparmNone();
                                                  pre(FLOW_NEXT); do_xor(LONG); post();
            bind(OPC.NEG_L);                      iparmNone();
                                                  pre(FLOW_NEXT); do_neg(LONG); post();
            bind(OPC.SHL_L);                      iparmNone();
                                                  pre(FLOW_NEXT); do_shl(LONG); post();
            bind(OPC.SHR_L);                      iparmNone();
                                                  pre(FLOW_NEXT); do_shr(LONG); post();
            bind(OPC.USHR_L);                     iparmNone();
                                                  pre(FLOW_NEXT); do_ushr(LONG); post();
            bind(OPC.L2I);                        iparmNone();
                                                  pre(FLOW_NEXT); do_l2i(); post();  
            bind(OPC.I2L);                        iparmNone();
                                                  pre(FLOW_NEXT); do_i2l(); post();  
            bind(OPC.THROW);                      iparmNone();
                                                  pre(FLOW_CALL); do_throw(); post();
            bind(OPC.POP_1);                      iparmNone();
                                                  pre(FLOW_NEXT); do_pop(1); post(); 
            bind(OPC.POP_2);                      iparmNone();
                                                  pre(FLOW_NEXT); do_pop(2); post(); 
            bind(OPC.MONITORENTER);               iparmNone();
                                                  pre(FLOW_CALL); do_monitorenter(); post();
            bind(OPC.MONITOREXIT);                iparmNone();
                                                  pre(FLOW_CALL); do_monitorexit(); post();
            bind(OPC.CLASS_MONITORENTER);         iparmNone();
                                                  pre(FLOW_CALL); do_class_monitorenter(); post();
            bind(OPC.CLASS_MONITOREXIT);          iparmNone();
                                                  pre(FLOW_CALL); do_class_monitorexit(); post();
            bind(OPC.ARRAYLENGTH);                iparmNone();
                                                  pre(FLOW_CALL); do_arraylength(); post();
            bind(OPC.NEW);                        iparmNone();
                                                  pre(FLOW_CALL); do_new(); post();  
            bind(OPC.NEWARRAY);                   iparmNone();
                                                  pre(FLOW_CALL); do_newarray(); post();
            bind(OPC.NEWDIMENSION);               iparmNone();
                                                  pre(FLOW_CALL); do_newdimension(); post();
            bind(OPC.CLASS_CLINIT);               iparmNone();
                                                  pre(FLOW_CALL); do_class_clinit(); post();
            bind(OPC.BBTARGET_SYS);               iparmNone();
                                                  pre(FLOW_NEXT); do_bbtarget_sys(); post();
            bind(OPC.BBTARGET_APP);               iparmNone();
                                                  pre(FLOW_CALL); do_bbtarget_app(); post();
            bind(OPC.INSTANCEOF);                 iparmNone();
                                                  pre(FLOW_CALL); do_instanceof(); post();
            bind(OPC.CHECKCAST);                  iparmNone();
                                                  pre(FLOW_CALL); do_checkcast(); post();
            bind(OPC.ALOAD_I);                    iparmNone();
                                                  pre(FLOW_CALL); do_aload(INT); post();
            bind(OPC.ALOAD_B);                    iparmNone();
                                                  pre(FLOW_CALL); do_aload(BYTE); post();
            bind(OPC.ALOAD_S);                    iparmNone();
                                                  pre(FLOW_CALL); do_aload(SHORT); post();
            bind(OPC.ALOAD_C);                    iparmNone();
                                                  pre(FLOW_CALL); do_aload(USHORT); post();
            bind(OPC.ALOAD_O);                    iparmNone();
                                                  pre(FLOW_CALL); do_aload(OOP); post();
            bind(OPC.ALOAD_L);                    iparmNone();
                                                  pre(FLOW_CALL); do_aload(LONG); post();
            bind(OPC.ASTORE_I);                   iparmNone();
                                                  pre(FLOW_CALL); do_astore(INT); post();
            bind(OPC.ASTORE_B);                   iparmNone();
                                                  pre(FLOW_CALL); do_astore(BYTE); post();
            bind(OPC.ASTORE_S);                   iparmNone();
                                                  pre(FLOW_CALL); do_astore(SHORT); post();
            bind(OPC.ASTORE_O);                   iparmNone();
                                                  pre(FLOW_CALL); do_astore(OOP); post();
            bind(OPC.ASTORE_L);                   iparmNone();
                                                  pre(FLOW_CALL); do_astore(LONG); post();
            bind(OPC.LOOKUP_I);                   iparmNone();
                                                  pre(FLOW_CALL); do_lookup(INT); post();
            bind(OPC.LOOKUP_B);                   iparmNone();
                                                  pre(FLOW_CALL); do_lookup(BYTE); post();
            bind(OPC.LOOKUP_S);                   iparmNone();
                                                  pre(FLOW_CALL); do_lookup(SHORT); post();
            bind(OPC.PAUSE);                      iparmNone();
                                                  pre(FLOW_NEXT); do_pause(); post();

/*if[FLOATS]*/
            bind(OPC.FCMPL);                      iparmNone();
                                                  pre(FLOW_NEXT); do_fcmpl(); post();
            bind(OPC.FCMPG);                      iparmNone();
                                                  pre(FLOW_NEXT); do_fcmpg(); post();
            bind(OPC.DCMPL);                      iparmNone();
                                                  pre(FLOW_NEXT); do_dcmpl(); post();
            bind(OPC.DCMPG);                      iparmNone();
                                                  pre(FLOW_NEXT); do_dcmpg(); post();
            bind(OPC.GETSTATIC_F);                iparmUByte();
            bind(OPC.GETSTATIC_F_WIDE);           pre(FLOW_CALL); do_getstatic(FLOAT); post();
            bind(OPC.GETSTATIC_D);                iparmUByte();
            bind(OPC.GETSTATIC_D_WIDE);           pre(FLOW_CALL); do_getstatic(DOUBLE); post();
            bind(OPC.CLASS_GETSTATIC_F);          iparmUByte();
            bind(OPC.CLASS_GETSTATIC_F_WIDE);     pre(FLOW_CALL); do_class_getstatic(FLOAT); post();
            bind(OPC.CLASS_GETSTATIC_D);          iparmUByte();
            bind(OPC.CLASS_GETSTATIC_D_WIDE);     pre(FLOW_CALL); do_class_getstatic(DOUBLE); post();
            bind(OPC.PUTSTATIC_F);                iparmUByte();
            bind(OPC.PUTSTATIC_F_WIDE);           pre(FLOW_CALL); do_putstatic(FLOAT); post();
            bind(OPC.PUTSTATIC_D);                iparmUByte();
            bind(OPC.PUTSTATIC_D_WIDE);           pre(FLOW_CALL); do_putstatic(DOUBLE); post();
            bind(OPC.CLASS_PUTSTATIC_F);          iparmUByte();
            bind(OPC.CLASS_PUTSTATIC_F_WIDE);     pre(FLOW_CALL); do_class_putstatic(FLOAT); post();
            bind(OPC.CLASS_PUTSTATIC_D);          iparmUByte();
            bind(OPC.CLASS_PUTSTATIC_D_WIDE);     pre(FLOW_CALL); do_class_putstatic(DOUBLE); post();
            bind(OPC.GETFIELD_F);                 iparmUByte();
            bind(OPC.GETFIELD_F_WIDE);            pre(FLOW_CALL); do_getfield(FLOAT); post();
            bind(OPC.GETFIELD_D);                 iparmUByte();
            bind(OPC.GETFIELD_D_WIDE);            pre(FLOW_CALL); do_getfield(DOUBLE); post();
            bind(OPC.GETFIELD0_F);                iparmUByte();
            bind(OPC.GETFIELD0_F_WIDE);           pre(FLOW_NEXT); do_getfield0(FLOAT); post();
            bind(OPC.GETFIELD0_D);                iparmUByte();
            bind(OPC.GETFIELD0_D_WIDE);           pre(FLOW_NEXT); do_getfield0(DOUBLE); post();
            bind(OPC.PUTFIELD_F);                 iparmUByte();
            bind(OPC.PUTFIELD_F_WIDE);            pre(FLOW_CALL); do_putfield(FLOAT); post();
            bind(OPC.PUTFIELD_D);                 iparmUByte();
            bind(OPC.PUTFIELD_D_WIDE);            pre(FLOW_CALL); do_putfield(DOUBLE); post();
            bind(OPC.PUTFIELD0_F);                iparmUByte();
            bind(OPC.PUTFIELD0_F_WIDE);           pre(FLOW_NEXT); do_putfield0(FLOAT); post();
            bind(OPC.PUTFIELD0_D);                iparmUByte();
            bind(OPC.PUTFIELD0_D_WIDE);           pre(FLOW_NEXT); do_putfield0(DOUBLE); post();
            bind(OPC.INVOKEVIRTUAL_F);            iparmUByte();
            bind(OPC.INVOKEVIRTUAL_F_WIDE);       pre(FLOW_CALL); do_invokevirtual(FLOAT); post();
            bind(OPC.INVOKEVIRTUAL_D);            iparmUByte();
            bind(OPC.INVOKEVIRTUAL_D_WIDE);       pre(FLOW_CALL); do_invokevirtual(DOUBLE); post();
            bind(OPC.INVOKESTATIC_F);             iparmUByte();
            bind(OPC.INVOKESTATIC_F_WIDE);        pre(FLOW_CALL); do_invokestatic(FLOAT); post();
            bind(OPC.INVOKESTATIC_D);             iparmUByte();
            bind(OPC.INVOKESTATIC_D_WIDE);        pre(FLOW_CALL); do_invokestatic(DOUBLE); post();
            bind(OPC.INVOKESUPER_F);              iparmUByte();
            bind(OPC.INVOKESUPER_F_WIDE);         pre(FLOW_CALL); do_invokesuper(FLOAT); post();
            bind(OPC.INVOKESUPER_D);              iparmUByte();
            bind(OPC.INVOKESUPER_D_WIDE);         pre(FLOW_CALL); do_invokesuper(DOUBLE); post();
            bind(OPC.INVOKENATIVE_F);             iparmUByte();
            bind(OPC.INVOKENATIVE_F_WIDE);        pre(FLOW_CALL); do_invokenative(FLOAT); post();
            bind(OPC.INVOKENATIVE_D);             iparmUByte();
            bind(OPC.INVOKENATIVE_D_WIDE);        pre(FLOW_CALL); do_invokenative(DOUBLE); post();
            bind(OPC.INVOKESLOT_F);               iparmNone();
                                                  pre(FLOW_CALL); do_invokeslot(FLOAT); post();
            bind(OPC.INVOKESLOT_D);               iparmNone();
                                                  pre(FLOW_CALL); do_invokeslot(DOUBLE); post();
            bind(OPC.RETURN_F);                   iparmNone();
                                                  pre(FLOW_CHANGE); do_return(FLOAT); post();
            bind(OPC.RETURN_D);                   iparmNone();
                                                  pre(FLOW_CHANGE); do_return(DOUBLE); post();
            bind(OPC.CONST_FLOAT);                iparmNone();
                                                  pre(FLOW_CHANGE); do_const_float(); post();
            bind(OPC.CONST_DOUBLE);               iparmNone();
                                                  pre(FLOW_CHANGE); do_const_double(); post();
            bind(OPC.ADD_F);                      iparmNone();
                                                  pre(FLOW_NEXT); do_add(FLOAT); post();
            bind(OPC.SUB_F);                      iparmNone();
                                                  pre(FLOW_NEXT); do_sub(FLOAT); post();
            bind(OPC.MUL_F);                      iparmNone();
                                                  pre(FLOW_NEXT); do_mul(FLOAT); post();
            bind(OPC.DIV_F);                      iparmNone();
                                                  pre(FLOW_NEXT); do_div(FLOAT); post();
            bind(OPC.REM_F);                      iparmNone();
                                                  pre(FLOW_NEXT); do_rem(FLOAT); post();
            bind(OPC.NEG_F);                      iparmNone();
                                                  pre(FLOW_NEXT); do_neg(FLOAT); post();
            bind(OPC.ADD_D);                      iparmNone();
                                                  pre(FLOW_NEXT); do_add(DOUBLE); post();
            bind(OPC.SUB_D);                      iparmNone();
                                                  pre(FLOW_NEXT); do_sub(DOUBLE); post();
            bind(OPC.MUL_D);                      iparmNone();
                                                  pre(FLOW_NEXT); do_mul(DOUBLE); post();
            bind(OPC.DIV_D);                      iparmNone();
                                                  pre(FLOW_NEXT); do_div(DOUBLE); post();
            bind(OPC.REM_D);                      iparmNone();
                                                  pre(FLOW_NEXT); do_rem(DOUBLE); post();
            bind(OPC.NEG_D);                      iparmNone();
                                                  pre(FLOW_NEXT); do_neg(DOUBLE); post();
            bind(OPC.I2F);                        iparmNone();
                                                  pre(FLOW_NEXT); do_i2f(); post();  
            bind(OPC.L2F);                        iparmNone();
                                                  pre(FLOW_NEXT); do_l2f(); post();  
            bind(OPC.F2I);                        iparmNone();
                                                  pre(FLOW_NEXT); do_f2i(); post();  
            bind(OPC.F2L);                        iparmNone();
                                                  pre(FLOW_NEXT); do_f2l(); post();  
            bind(OPC.I2D);                        iparmNone();
                                                  pre(FLOW_NEXT); do_i2d(); post();  
            bind(OPC.L2D);                        iparmNone();
                                                  pre(FLOW_NEXT); do_l2d(); post();  
            bind(OPC.F2D);                        iparmNone();
                                                  pre(FLOW_NEXT); do_f2d(); post();  
            bind(OPC.D2I);                        iparmNone();
                                                  pre(FLOW_NEXT); do_d2i(); post();  
            bind(OPC.D2L);                        iparmNone();
                                                  pre(FLOW_NEXT); do_d2l(); post();  
            bind(OPC.D2F);                        iparmNone();
                                                  pre(FLOW_NEXT); do_d2f(); post();  
            bind(OPC.ALOAD_F);                    iparmNone();
                                                  pre(FLOW_CALL); do_aload(FLOAT); post();
            bind(OPC.ALOAD_D);                    iparmNone();
                                                  pre(FLOW_CALL); do_aload(DOUBLE); post();
            bind(OPC.ASTORE_F);                   iparmNone();
                                                  pre(FLOW_CALL); do_astore(FLOAT); post();
            bind(OPC.ASTORE_D);                   iparmNone();
                                                  pre(FLOW_CALL); do_astore(DOUBLE); post();
/*end[FLOATS]*/
        }
    }
}
