/*
 * Copyright 2004 Sun Microsystems, Inc. All Rights Reserved.
 *
 * This software is the proprietary information of Sun Microsystems, Inc.
 * Use is subject to license terms.
 *
 * This is a part of the Squawk JVM.
 */

#define DB_MAX_BPS 100
int sda_bp_set_or_stepping; // TRUE if we have any breakpoints set or are in a stepping mode [optimisation]

/* Null terminated array of instruction pointer values */
ByteAddress sda_breakpoints[DB_MAX_BPS + 1];

void dumpSteppingInfo(Offset currentBCI, Offset currentFO, Address step) {
    fprintf(stderr, format("====== Step Info ======\n    currentBCI: %A, currentFO: %A\n    startFO: %d, startBCI: %d\n    targetBCI: %d, dupBCI: %d, afterDupBCI: %d\n    size: %d, depth: %d\n"),
            currentBCI, currentFO,
            com_sun_squawk_Debugger_SingleStep_startFO(step),
            com_sun_squawk_Debugger_SingleStep_startBCI(step),
            com_sun_squawk_Debugger_SingleStep_targetBCI(step),
            com_sun_squawk_Debugger_SingleStep_dupBCI(step),
            com_sun_squawk_Debugger_SingleStep_afterDupBCI(step),
            com_sun_squawk_Debugger_SingleStep_size(step),
            com_sun_squawk_Debugger_SingleStep_depth(step));
}

/*
 * Get a pointer to the base of the operand stack for the current method.
 */
UWordAddress getInitialStackPointer(UWordAddress thefp) {
    Address mp = getObject(thefp, FP_method);
    int delta;
    int b0 = getb0(mp);
    if (b0 < 128) {
        int b1 = getb1(mp);
/*if[REVERSE_PARAMETERS]*/
        delta = decodeLocalCount(b0, b1);
/*else[REVERSE_PARAMETERS]*/
//      delta = decodeLocalCount(b0, b1) + decodeStackCount(b0, b1);
/*end[REVERSE_PARAMETERS]*/
    } else {
        delta = getLocalCountPlusStackCountIfNotReversingParms(mp);
    }
    return thefp - delta + 1;
}

boolean isInterpreterInvoked(UWordAddress mp) {
    int b0 = getb0(mp);
    if (b0 < 128) {
        return false;
    } else {
        return (b0 & com_sun_squawk_MethodBody_FMT_I) != 0;
    }
}

/**
 * Determines if the interpreter is in a system frame.
 *
 * @param userFP      the last known user frame
 * @param currentFP   the current frame
 * @return true if currentFP is more nested on the call stack than userFP and there is
 *         a frame between these two for a call into a method that is only called by the VM
 */
boolean inSystemFrame(UWordAddress userFP, UWordAddress currentFP) {
    if (hi(currentFP, userFP)) {
        return false;
    } else {
        do {
            Address mp = getObject(currentFP, FP_method);
            if (isInterpreterInvoked(mp)) {
                return true;
            }
            currentFP = (UWordAddress)getObject(currentFP, FP_returnFP);
        } while (lo(currentFP, userFP));
    }
    return false;
}

boolean sda_isOperandStackEmpty(UWordAddress actual_fp, UWordAddress actual_sp) {
    boolean result = true;
    if (actual_fp != null) {
        UWordAddress initial_sp = getInitialStackPointer(actual_fp);
        if (Address_diff(initial_sp, actual_sp) != 0) {
            result = false;
        }
    }
    return result;
}

/**
 * Call everytime we switch threads. If the new thread is running in an isolate with
 * a debugging context, and there are breakpoints set in that context, then cache the current
 * set of breakpoints. Otherwise clear the cached state.
 *
 * This means that there will be no breakpoint searching for the service thread or the
 * debugger isolate. Since calling GC involves switching to a service thread, this means that
 * we will never see stale addresses in sda_breakpoints. Also, since all commands that add or
 * clear breakpoints occur in the debugger isolate, the thread switchs will clear the cached
 * breakpoint data, and cause the cache to be regenerated when the app isolate is rescheduled.
 */
 void sda_updateBreakpointCache(Address isolate) {
    Address breakpoints;
    /* clear by default: */
    sda_bp_set_or_stepping = false;
    sda_breakpoints[0] = 0;

    if ((isolate != null) && (breakpoints = (Address)com_sun_squawk_Isolate_breakpoints(isolate)) != null) {
        int len;
        int i;
        len = getArrayLength(breakpoints);
        assume(len > 0);
        assume(len < DB_MAX_BPS);
        assume(!runningOnServiceThread);

        for (i = 0; i < len; i++) {
            Address bp = getObject(breakpoints, i);
            Address bp_mp = com_sun_squawk_Isolate_Breakpoint_mp(bp);
            int     bp_ip = com_sun_squawk_Isolate_Breakpoint_ip(bp);
            sda_breakpoints[i] = Address_add(bp_mp, bp_ip);
/* fprintf(stderr, "Setting breakpoint #%d for %x + %x = %x\n", i, bp_mp, bp_ip, sda_breakpoints[i]); */
        }

        sda_breakpoints[len] = 0;
        sda_bp_set_or_stepping = true;
    }

    if (!sda_bp_set_or_stepping) {
        Address step = com_sun_squawk_VMThread_step(com_sun_squawk_VMThread_currentThread);
        sda_bp_set_or_stepping = (step != null &&
                                  com_sun_squawk_Debugger_SingleStep_state(step) != com_sun_squawk_Debugger_SingleStep_HIT);
    }
}
